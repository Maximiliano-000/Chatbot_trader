import os
import tensorflow as tf
import yfinance as yf
import socket
from lstm_forecaster import CriptoForecaster

def verificar_tensorflow():
    try:
        print(f"‚úÖ TensorFlow OK: vers√£o {tf.__version__}")
        if tf.config.list_physical_devices('GPU'):
            print("‚ö°Ô∏è GPU detectada e dispon√≠vel para uso.")
        else:
            print("‚ö†Ô∏è GPU n√£o detectada ‚Äî usando CPU.")
    except Exception as e:
        print(f"‚ùå Erro no TensorFlow: {e}")

def verificar_yfinance():
    try:
        df = yf.download("BTC-USD", period="5d")
        if df.empty:
            raise ValueError("Sem dados retornados.")
        print("‚úÖ yfinance OK: dados de BTC-USD carregados.")
    except Exception as e:
        print(f"‚ùå Erro no yfinance: {e}")

def verificar_modelo():
    try:
        forecaster = CriptoForecaster("BTC-USD", epochs=1)
        forecaster.carregar_dados()
        forecaster.treinar()
        previsoes = forecaster.prever(dias=3)
        print(f"‚úÖ Modelo LSTM OK. Previs√µes: {previsoes}")
    except Exception as e:
        print(f"‚ùå Erro no modelo LSTM: {e}")

def verificar_modelo_salvo():
    path = "modelos_lstm/BTC-USD_modelo.keras"
    if os.path.exists(path):
        print(f"‚úÖ Arquivo de modelo salvo encontrado: {path}")
    else:
        print(f"‚ö†Ô∏è Modelo salvo ainda n√£o existe: {path}")

def verificar_internet():
    try:
        socket.gethostbyname("www.google.com")
        print("‚úÖ Conex√£o com a internet detectada.")
    except:
        print("‚ùå Sem conex√£o com a internet.")

if __name__ == "__main__":
    print("üîç Verifica√ß√£o do ambiente AnaliZ\n")
    verificar_tensorflow()
    verificar_internet()
    verificar_yfinance()
    verificar_modelo()
    verificar_modelo_salvo()